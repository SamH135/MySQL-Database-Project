**Before attempting to run this project in an IDE, you must...**

1. Install Node JS (I'm using v21.1.0, so either that one or newer to avoid compatibility issues) on your machine

`NOTE: steps 2 & 3 are only if you plan to run the project using local host, otherwise skip to step 4 and set up with your online database`
2. Set up a local server using software like wampserver (or something similar)

3. set up the database in MySQL Workbench and run the create.sql and load.sql to create
   tables and load some basic data into them. *See the MySQL Setup section at the bottom for more details*

4. Configure and connect your MySQL database to the server in `app.js`

   **Database Configuration:**
   - create a new file named `.env` (this will be a hidden file that contains sensitive database info)
   - Open the `.env` file in a text editor and create/update the following variables with your database connection details:

     ```dotenv
     HOST=localhost
     USER=username
     PASSWORD=password
     DATABASE=database_name
     ```

   - Replace `localhost`, `username`, `password`, and `database_name` with your MySQL server details.
   - Save the `.env` file.

   `NOTE: Ensure that you keep your .env file confidential and do not share it publicly. It contains sensitive information such as database credentials`

5. Perform the following npm commands in your terminal to create a package.json (if you don't already have it), and to download all
   the necessary dependencies:

   - npm init -y

   - npm install bcryptjs@^2.4.3 body-parser@^1.20.2 bootstrap@^5.3.2 
     cookie-parser@^1.4.6 dotenv@^16.3.1 express@^4.18.2 express-handlebars@^7.1.2 
     express-session@^1.17.3 handlebars@^4.7.8 hbs@^4.2.0 jsonwebtoken@^9.0.2 mysql@^2.18.1 
     nodemon@^3.0.1 path@^0.12.7

   - npm start 

6. Ensure that the server is running on the specified port (port = 5000 in `app.js`), and open your browser and type 
   localhost:5000 or localhost:*your_port_number* and the application should render with the home/login/register page provided in `index.hbs`





**List of files and what they do**

`app.js`:  initializes and configures the Express application, sets up middleware for session management, handles static files, connects to a 
           MySQL database, defines routes, and starts the server on a specified port.

`.env`: stores import database credentials in a hidden file - you will have to create this one to set up the Inventory Management System

`package.json`: contains information about the project such as name, version, description, scripts for running the app, dependencies, etc.

`package-lock.json`: generated by NPM when you run `npm i`. It's used for dependency management.


*views* - handlebars forms (html) for front-end user interfaces:

   `index.hbs`: home page with basic info about the project and options for users to register/login to the system
   `register.hbs`: registration page that allows new users to make an account in the inventory system
   `login.hbs`: login page for existing users to access their accounts
   `dashboard.hbs`: dashboard where all user's CRUD options are displayed, allowing them to choose to view/update inventory, etc.
   `inventory.hbs`: allows all users to view the current inventory stored in the MySQL database
   `updateStock.hbs`: allows all users to modify the quantity of each item in the current inventory
   `placeOrder.hbs`: allows Supervisors and Managers to place orders and tracks the order details for all orders that are placed
   `userManagement.hbs`: allows Managers to display a list of registered users and provides options to add, delete, or update user information


*public* - CSS 

   `styles.css`: sets up basic styling for the website, including colors, fonts, etc.


*controllers* - JavaScript

   `/controllers/auth.js`: handles requests from client side to server side. This includes handling user authentication and authorization    
                           functionalities. It also includes functions for user registration, login, dashboard access, managing inventory, updating stock, placing orders, and user management. The file utilizes technologies like MySQL for database interactions, JWT for session management, and bcrypt for password hashing. Additionally, it incorporates functions for inserting, retrieving, and modifying user and order data in the database.

*routes* - JavaScript

   `/routes/auth.js`: responds to HTTP POST request, defines the routes for the web application using the Express.js framework. Each route 
                      corresponds to a specific HTTP 
                      endpoint and is associated with a controller function from the authController module.
   `/routes/pages.js`: responds to HTTP GET request, defines routes for rendering various pages in your web application using the Express.js    
                       framework





**MySQL Setup for Local Host**

1. Download MySQL Workbench 
   - NOTE: you will need Wampserver to run the server locally hosted if you don't have an online database to connect to 

2. Launch MySQL Workbench on your machine. 

3. Connect to Your MySQL Server:

      - Connect to your MySQL server by entering the necessary connection details (hostname, username, password) in the connection dialog.

4. Open a New SQL Script Tab:

      - In MySQL Workbench, go to "File" > "New Query Tab" to open a new SQL script tab.

5. Execute the create.sql Script:

      - Copy the content of the create.sql script from your project's directory.
      - Paste the script into the new SQL script tab in MySQL Workbench.
      - Execute the script by clicking the lightning bolt icon or pressing Ctrl + Enter (Windows/Linux) or Command + Enter (Mac).

6. Execute the load.sql Script:

      - Copy the content of the load.sql script from your project's directory.
      - Paste the script into the same SQL script tab in MySQL Workbench, below the create.sql script.
      - Execute the script.

7. Verify Execution:

      - After executing both scripts, you should see the newly created tables and loaded data in the MySQL Workbench schema explorer.


